# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("/data/female_names.csv", stringsAsFactors = FALSE)
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("./data/female_names.csv", stringsAsFactors = FALSE)
lintr
library("lintr")
lintr::lint("assignment.R")
setwd("~/Desktop/INFO 201/a2-core-skills-ryanpchiu")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector){
gsub("[0-9]", "", vector)
}
lintr::lint("assignment.R")
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Ryan"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age){
print(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("Ryan", 19)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <-  toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, pattern = "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value){
return(value * 2)
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value){
return(value^3)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("spiderman", "dark knight", "superman", "gone girl", "the girl on the train", "harry potter")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1:3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
filter <- c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE)
without_four <- movies[filter]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- (700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- (500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("June 8, 2018", "%b %d, %Y")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
day_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday){
birthday_date <- as.Date(birthday)
N <- birthday_date - today
new_age <- age + 1
basic <- make_introduction(name, age)
paste0(basic, " In ", N, " days I'll be ", new_age,".")
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro("Ryan", 19, "2018-04-16")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector){
gsub("[0-9]", "", vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
without_digits <- remove_digits(c("INFO 201", "CSE 142"))
install.packages("stringr")
lintr::lint("assignement.R")
setwd("~/Desktop/INFO 201/a2-core-skills-ryanpchiu")
lintr::lint("assignement.R")
lintr::lint("assignement.R")
lintr::lint("assignement.R")
setwd("~/Desktop/INFO 201/a2-core-skills-ryanpchiu")
lintr::lint("assignement.R")
lintr::lint("assignement.R")
setwd("~/Desktop/INFO 201/a2-core-skills-ryanpchiu")
lintr::lint("assignement.R")
setwd("~/Desktop/a2-core-skills-ryanpchiu")
# a2-foundational-skills
# Set up and Defining variables ------------------------------------------------
# Install and load the the `stringr` package
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Ryan"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age){
print(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction("Ryan", 19)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <-  toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, pattern = "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value){
return(value * 2)
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value){
return(value^3)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("spiderman", "dark knight", "superman", "gone girl", "the girl on the train", "harry potter")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[c(1:3)]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
filter <- c(TRUE, TRUE, TRUE, FALSE, TRUE, TRUE)
without_four <- movies[filter]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- (700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- (500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("June 8, 2018", "%b %d, %Y")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
day_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday){
birthday_date <- as.Date(birthday)
N <- birthday_date - today
new_age <- age + 1
basic <- make_introduction(name, age)
paste0(basic, " In ", N, " days I'll be ", new_age,".")
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro("Ryan", 19, "2018-04-16")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector){
gsub("[0-9]", "", vector)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
without_digits <- remove_digits(c("INFO 201", "CSE 142"))
lintr::lint("assignment.R")
lintr::lint("assignment.R")
lintr::lint("assignment.R")
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("./data/female_names.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/ch9-data-frames/exercise-5")
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("./data/female_names.csv", stringsAsFactors = FALSE)
names
names
View(names)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- data.frame(names[, names$year == "2013"])
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- data.frame(names[, names$year == "2013"])
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- data.frame(names[names$year == "2013", ])
names_2013
# What was the most popular female name in 2013?
mode(names$name)
# What was the most popular female name in 2013?
mode(names$name)
# What was the most popular female name in 2013?
mode(names$name)
mode(names$name)
# What was the most popular female name in 2013?
mode(names$name == "Aadi")
mode(names$name == "Aadi")
# What was the most popular female name in 2013?
numbers(names$name == "Aadi")
# What was the most popular female name in 2013?
nrow(names$name == "Aadi")
# What was the most popular female name in 2013?
nrow(names[names$name == "Aadi",])
# What was the most popular female name in 2013?
max(names[names$year == "2013", ])
# What was the most popular female name in 2013?
max(nrow(names[names$year == "2013", ])
# What was the most popular female name in 2013?
max(nrow(
names[names$year == "2013", ]
)
)
# What was the most popular female name in 2013?
max(names_2013$prop)
# What was the most popular female name in 2013?
names$name([max(names_2013$prop),])
# What was the most popular female name in 2013?
names$name(names[max(names_2013$prop),])
names[max(names_2013$prop),]
names[max(names_2013$prop),]
View(names_2013)
max(names_2013$prop)
names_2013$prop == max(names_2013$prop)
# What was the most popular female name in 2013?
names$name(names_2013[names_2013$prop == max(names_2013$prop),])
names_2013[names_2013$prop == max(names_2013$prop),]
# What was the most popular female name in 2013?
names_2013$name(names_2013[names_2013$prop == max(names_2013$prop),])
names_2013[names_2013$prop == max(names_2013$prop),]
# What was the most popular female name in 2013?
names_2013$name[names_2013[names_2013$prop == max(names_2013$prop),]]
# What was the most popular female name in 2013?
names_2013$namenames_2013[names_2013$prop == max(names_2013$prop), "name"]]
# What was the most popular female name in 2013?
names_2013$name(names_2013[names_2013$prop == max(names_2013$prop), "name"])
# What was the most popular female name in 2013?
(names_2013[names_2013$prop == max(names_2013$prop), "name"])
# What was the most popular female name in 2013?
names_2013[names_2013$prop == max(names_2013$prop), "name"]
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year){
name_of_the_year <- data.frame(names[names$year == "year", ])
return(name_of_the_year[name_of_the_year$prop == max(name_of_the_year$prop), "name"])
}
most_popular_in_year(2013)
# Write a function `most_popular_in_year` that takes in a year as a value and
# returns the most popular name in that year
most_popular_in_year <- function(year){
name_of_the_year <- data.frame(names[names$year == year, ])
return(name_of_the_year[name_of_the_year$prop == max(name_of_the_year$prop), "name"])
}
most_popular_in_year(2013)
